#!/usr/bin/env python3

import argparse,csv,sys
from cvec.db import *


csv.field_size_limit(sys.maxsize)


class Main(object):

    def __init__(self):
        parser = argparse.ArgumentParser(description="Create cve table from list")
        parser.add_argument('path', nargs="+", metavar="PATH", help="List(s) of CVEs (format: 'CVE-2018-10546')")
        parser.add_argument('--output', metavar="CSV", help='File name where results shall be stored.')
        parser.add_argument('--whitelist', metavar="CSV", help='Output only subset of CVEs. CSV can be output CSV from CVEchecker.')
        self.args = parser.parse_args()

    def readf(self,f):
        with open(f) as fp:
            return fp.readlines()
    
    def __call__(self):
        cves = set([line_strip for path in self.args.path
            for line in self.readf(path) for line_strip in [line.strip()] if line_strip and line_strip[0] != "#"])
        if self.args.whitelist:
            with open(self.args.whitelist,"r") as fp:
                csvfile = csv.DictReader(fp)
                whitelist = set([e["cve_id"] for e in csvfile])
                cves = whitelist.intersection(cves)
        rows = list(cve_db.get_cves_by_ids(ids=cves))
        if len(rows) == 0: 
            sys.stderr.write("Empty set.\n")
            exit(1)
        with open(self.args.output,"w") as fp:
            writer=csv.DictWriter(fp, fieldnames=rows[0].keys())
            writer.writeheader()
            for data in rows: writer.writerow(data)


if __name__ == '__main__':
    Main()()

