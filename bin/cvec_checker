#!/usr/bin/env python3
import json, sys, csv
from pprint import pprint
import argparse
import os
import zipfile
import io
import datetime
import requests
import cvss
from cvec.db import *
from cvec.cpe_set import CPESet, load_cpe_file

       
class CVE_DB_Installer(object):
    """ Read CVE as JSON from the internet and create local database """

    def __init__(self,json_db_paths=None):
        if not json_db_paths:
            json_db_paths = self._download_cve_dbs()
        cve_db.create_source()
        cve_db.create_cve()
        cve_db.create_product()
        cve_dbs = self._convert_cve_dbs(json_db_paths)
        print ("\n[*] {0} CVE databases loaded:".format(len(json_db_paths)))
        for db_path in json_db_paths:
            print ("[*] {0}".format(db_path))

    def _download_cve_dbs(self):
        current_year=datetime.datetime.now().year
        years=range(2002, current_year + 1)
        print ("\n[*] download CVEs from {0}-{1}".format("2002", current_year))
        file_paths = []
        for year in years:
            zip_file_url = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{0}.json.zip".format(year)
            print ("[*] download and extract {0}".format(zip_file_url))
            r = requests.get("" + zip_file_url)
            if r.ok:
                z = zipfile.ZipFile(io.BytesIO(r.content))
                zip_content = list(filter(lambda e: e.endswith(".json"), z.namelist()))
                assert(len(zip_content) == 1)
                path = "/tmp/_db_%s"%year
                for f in zip_content: z.extract(f, path)
                file_paths.append(os.path.join(path,zip_content[0]))
            else:
                print ("[!] download failed: %s"%zip_file_url)
        return file_paths

    def _convert_cve_dbs(self,cve_db_paths):
        sys.stderr.write("[*] Converting database");sys.stderr.flush()
        for cve_db_path in cve_db_paths:
            with open(cve_db_path, encoding='utf-8') as fp:
                self._parseJSON(cve_db_path,json.load(fp))
            sys.stderr.write(".");sys.stderr.flush()
        sys.stderr.write("\n")
        
    def _parseImpact(self,cve):
        if 'baseMetricV3' in cve['impact']:
            impact_score=cve['impact']['baseMetricV3']['cvssV3']['baseScore']
            impact_severity=cve['impact']['baseMetricV3']['cvssV3']['baseSeverity']
            vector=cve["impact"]["baseMetricV3"]["cvssV3"]["vectorString"]
            impact_score_v2=None
        elif 'baseMetricV2' in cve['impact']:
            c = CVSS_Converter.cvss2to3(
                cve["impact"]["baseMetricV2"]["cvssV2"]["vectorString"],
                "R" if cve["impact"]["baseMetricV2"].get("userInteractionRequired") else "N")
            impact_score=str(c.base_score)
            impact_severity=c.severities()[0]
            vector=c.clean_vector()
            impact_score_v2=cve['impact']['baseMetricV2']['cvssV2']['baseScore']
            #print(cve["impact"]["baseMetricV2"])
            #print("INFO: cvss2to3: %s -> %s"%(cve['impact']['baseMetricV2']['cvssV2']['baseScore'],impact_score))
        else: raise ValueError("baseMetricV* not in @cve.")
        return dict(
            impact_score=impact_score,
            impact_severity=impact_severity.upper(),
            vector=vector,
            impact_score_v2=impact_score_v2)
    
    def _parseJSON(self,path,json_d):
        source_id = cve_db.insert_source(filename=path,added_on=str(datetime.datetime.now()))
        
        for cve in json_d["CVE_Items"]:
            if not cve["impact"]: continue
            #yield dict(
            cve_db.insert_cve(dict(
                source=source_id,
                cve_id=cve['cve']['CVE_data_meta']['ID'],
                cve_description=cve['cve']['description']['description_data'][0]['value'],
                publishedDate=cve["publishedDate"],
                lastModifiedDate=cve["lastModifiedDate"],
                publishedDate_formatted=cve["publishedDate"][:10],
                lastModifiedDate_formatted=cve["lastModifiedDate"][:10],
                configuration=json.dumps(cve["configurations"]),
                **self._parseImpact(cve)
            ))


class CVE_Finder:
    
    def __init__(self, cpe_set):
        self.cves = []
        self.unmatched = []
        print("Vulnerability List\n")
        count = cve_db._execute("SELECT count(*) FROM cve").fetchone()[0]
        for i,cve in enumerate(cve_db._execute("SELECT * FROM cve")):
            sys.stderr.write("\r%d/%d"%(i,count))
            conf_dict = json.loads(cve["configuration"])["nodes"]
            if cpe_set.matches(conf_dict):
                #cpe_set_matching = cpe_set
                conf_dict_uris = "".join(self.get_cpe_uris(conf_dict))
                cpe_set_matching = [cpe for cpe in cpe_set #speed up
                    if any([product in conf_dict_uris for product in cpe.get_product()])]
                matching = [cpe for cpe in cpe_set_matching
                    if not CPESet(filter(lambda e:e!=cpe, cpe_set)).matches(conf_dict)]
                if len(matching) == 0:
                    raise RuntimeError("CVE matches not equal to 1: %s\n"%cve)
                for cpe in matching:
                    cve = dict(cve)
                    cve["product_name"] = cpe.get_product()[0]
                    cve["product_version"] = cpe.get_version()[0]
                    self.cves.append(cve)
                #print(("%(product_name)s %(product_version)s\t"
                #    "%(cve_id)s\tCVSS2: %(impact_score_v2)s, CVSS3: %(impact_score)s, %(impact_severity)s "
                #    "(%(lastModifiedDate)s)")%cve)
        #print()
    
    def get_cpe_uris(self, conf_dict):
        for e in conf_dict:
            for e_ in self._resolve(e): yield e_
            
    def _resolve(self, e):
        if "children" in e:
            for f in e["children"]: 
                for e_ in self._resolve(f): yield e_
        elif "cpe_match" in e:
            for cpe_dict in e["cpe_match"]:
                yield cpe_dict["cpe23Uri"]
                """
                try:
                    cpe = CPE(cpe_dict["cpe23Uri"])
                except NotImplementedError as e:
                    cpe = CPE(cpe_dict["cpe23Uri"].replace("?","\\?"))
                yield self.name_match(cpe)
                """
        

class CVSS_Converter(object):
    
    """ Source: https://security.stackexchange.com/questions/127335/how-to-convert-risk-scores-cvssv1-cvssv2-cvssv3-owasp-risk-severity """ 
    conv = [
        ("AV","AV",dict(N="N",A="A",L="L")),
        ("AC","AC",dict(L="L",M="H",H="H")),
        ("Au","PR",dict(N="N",S="L",M="H")),
        ("C","C",dict(C="H",P="L",N="N")),
        ("I","I",dict(C="H",P="L",N="N")),
        ("A","A",dict(C="H",P="L",N="N")),
        ("E","E",dict(H="H",F="F",POC="POC",U="U",ND="X")),
        ("RL","RL",dict(OF="O",TF="T",W="W",U="U",ND="X")),
        ("RC","RC",dict(C="C",UR="R",UC="U",ND="X")),
    ]

    @classmethod
    def cvss2to3(self, vector, userInteractionRequired=None, scope=None):
        """
        Read CVSS v2 vector and return cvss.CVSS3 instance
        """
        v2 = {key:val for e in vector.split("/") for key,val in [e.split(":",1)]}
        v3 = {key3:choice[v2[key2]] for key2,key3,choice in self.conv if key2 in v2}
        if userInteractionRequired is None: v3["UI"] = "N" if v2["AC"] == "H" else "R"
        else: v3["UI"] = userInteractionRequired
        if scope: v3["S"] = scope
        else: v3["S"] = "C" if "H" in (v2["C"], v2["I"], v2["A"]) else "U"
        c = cvss.CVSS3("/".join(["CVSS:3.0"]+["%s:%s"%e for e in v3.items()]))
        return c
        

class Main(object):

    def __init__(self):
        parser = argparse.ArgumentParser(description="This little tool helps you to identify vulnerable software packages, by looking them up in the CVE (Common Vulnerabilities and Exposure) databases from the NVD. CVEchecker is designed to work offline. Once after initialising the database with parameter init, you can feed it with the package list file.")
        subparsers = parser.add_subparsers(dest="command")
        subparsers.required = True

        init = subparsers.add_parser('init', help='Download and extract all CVE databases since 2002 from https://nvd.nist.gov/vuln/data-feeds#JSON_FEED). More than 1 GB of free harddrive space is needed.')
        init.set_defaults(func=self.init_db)
        init.add_argument('--cve-dbs', metavar="PATH", nargs="+", help='Instead of downloading, use a local path to CVE database file(s). The json content must follow the NVD JSON 0.1 beta Schema (https://nvd.nist.gov/vuln/data-feeds#JSON_FEED).')
        
        find_cve = subparsers.add_parser('find-cve',help="Find corresponding CVEs for a given software list")
        find_cve.add_argument("packages_file",metavar="packages-file",help='CPE list')
        find_cve.add_argument('--output', metavar="CSV", help='File name where results shall be stored.')
        find_cve.set_defaults(func=self.find_cve)
        
        self.args = parser.parse_args()
        self.args.func()

    def init_db(self):
        CVE_DB_Installer(self.args.cve_dbs)
        
    def find_cve(self):
        finder = CVE_Finder(load_cpe_file(self.args.packages_file))
        if self.args.output and len(finder.cves)>0:
            with open(self.args.output, 'w') as fp:
                writer=csv.DictWriter(fp, fieldnames=finder.cves[0].keys())
                writer.writeheader()
                for data in finder.cves: writer.writerow(data)


if __name__ == '__main__':
    Main()

